{"pageProps":{"postData":{"id":"wordle-helper","contentHtml":"<p>As an excuse to brush up on my React and Next.js skills I have created <a href=\"https://github.com/R467/wordle-helper\">web app</a> that can be used to solve <a href=\"https://www.powerlanguage.co.uk/wordle/\">Wordle</a></p>\n<p>You can see it in action <a href=\"https://icy-ground-0b2064d10.1.azurestaticapps.net/\">here</a></p>\n<p><img src=\"/images/wordle-helper/wordle-helper.png\" alt=\"overview of the site\"></p>\n<p>My main takeaways from this have been about managing state in React using hooks and context to share state between components in different branches of the tree</p>\n<p>The key here has been identifying the lowest common parent and the minimum amount of state that needs to be shared between components</p>\n<p>Also, when creating components it is much easier to keep an array of data in state as opposed to a component that is ready to render</p>\n<p>For example, I originally had a createRow() function that returned a row component directly</p>\n<pre><code>function createRow() {\n    return (\n        &#x3C;div key={index} data-row={index} className=\"presentLetterRow\">     \n            &#x3C;PresentLetter index={index} order={0} tryCreateNewRow={tryCreateNewRow} letterUpdated={letterUpdated} />       \n            &#x3C;PresentLetter index={index} order={1} tryCreateNewRow={tryCreateNewRow} letterUpdated={letterUpdated} />\n            &#x3C;PresentLetter index={index} order={2} tryCreateNewRow={tryCreateNewRow} letterUpdated={letterUpdated} />\n            &#x3C;PresentLetter index={index} order={3} tryCreateNewRow={tryCreateNewRow} letterUpdated={letterUpdated} />\n            &#x3C;PresentLetter index={index} order={4} tryCreateNewRow={tryCreateNewRow} letterUpdated={letterUpdated} />\n        &#x3C;/div>\n    );\n}\n\n</code></pre>\n<p>This worked OK at first but when it came time to manage the state of each PresentLetter I hit a wall</p>\n<p>The solution was to keep the state of the row in an array</p>\n<pre><code>function tryCreateNewRow() {\n\n        const lastRow = presentRows[presentRows.length - 1];\n\n        const anyPopulated = lastRow?.letters.filter((l) => {\n            return l.populated;\n        })\n\n\n        if(lastRow &#x26;&#x26; anyPopulated.length == 0) {\n            return null;\n        }\n\n        return {\n            letters: [\n                {\n                    order : 0,\n                    populated: false\n                },\n                {\n                    order : 1,\n                    populated: false\n                },\n                {\n                    order : 2,\n                    populated: false\n                },\n                {\n                    order : 3,\n                    populated: false\n                },\n                {\n                    order : 4,\n                    populated: false\n                }\n            ]\n        }\n\n    }\n\n</code></pre>\n<p>That array can then be used to render the component and the state of the child components can easily be updated</p>\n<p>n.b. I know this code is far from optimised, it is a work in progress</p>\n","title":"Wordle helper","date":"2022-01-27"}},"__N_SSG":true}